type Query {
  me: User
  account: Account!
  users: [User!]!
  post(id: ID!): Post
  posts: [Post!]!
  comments: [Comment!]!
  comment(id: ID!): Comment!
  categories: [Category!]!
  category(id: ID!): Category!
  getPostCategories(postId: String!): [PostCategory!]!
  like(id: ID!): Like!
  tags: [Tag!]!
  getPostTags(postId: String!): [PostTag!]!
  media: [Media!]!
}

type Mutation {
  register(data: RegisterInput!): AuthPayload!
  login(data: LoginInput!): AuthPayload
  loginWithGoogle(accessToken: String!): AuthPayload!
  createPost(data: CreatePostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post
  deletePost(id: ID!): Boolean!
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Boolean!
  createLike(data: CreateLikeInput!): Like!
  deleteLike(id: ID!): Boolean!
  createCategory(data: CreateCategoryInput!): Category!
  createPostCategory(data: CreatePostCategoryInput!): PostCategory!
  createTag(data: CreateTagInput!): Tag!
  createMedia(data: CreateMediaInput!): Media!
}

enum Role {
  ADMIN
  SUPERADMIN
  USER
}

type User {
  id: ID!
  name: String
  email: String!
  role: Role!
  emailVerified: String
  image: String
  accounts: [Account]
  posts: [Post]
  comments: [Comment]
  likes: [Like]
  media: [Media]
  createdAt: String!
  updatedAt: String!
}

type Account {
  userId: ID!
  type: String!
  provider: String!
  providerAccountId: String!
  refresh_token: String
  access_token: String
  expires_at: Int
  token_type: String
  scope: String
  id_token: String
  session_state: String
  createdAt: String!
  updatedAt: String!
}

type VerificationToken {
  identifier: String!
  token: String!
  expires: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
  imageUrl: String
  createdAt: String!
  updatedAt: String!
  author: User
  comments: [Comment]
  likes: [Like]
  categories: [Category]
  tags: [Tag]
  media: [Media]
}

type PostCategory {
  postId: String!
  categoryId: String!
}

type Comment {
  id: ID!
  content: String!
  createdAt: String!
  post: Post
  user: User
}

type Like {
  id: ID!
  createdAt: String!
  post: Post
  user: User
}

type Category {
  id: ID!
  name: String!
  slug: String
  posts: [Post]
}

type Tag {
  id: ID!
  name: String!
  slug: String!
  posts: [Post]
}

type PostTag {
  postId: String!
  tagId: String!
}

type Media {
  id: ID!
  url: String!
  type: String!
  post: Post
  user: User
}

type AuthPayload {
  token: String!
  refreshToken: String!
  user: User!
}

input RegisterInput {
  name: String
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String
  email: String!
  emailVerified: String
  image: String
}

input CreatePostInput {
  title: String!
  content: String!
  imageUrl: String
  authorId: ID!
}

input CreatePostCategoryInput {
  postId: String!
  categoryId: String!
}

input UpdatePostInput {
  title: String
  content: String
  imageUrl: String
  categoryId: ID
  tags: [ID!]
}

input CreateCommentInput {
  content: String!
  postId: ID!
  userId: ID!
}

input CreateLikeInput {
  postId: ID!
  userId: ID!
}

input CreateCategoryInput {
  name: String!
  slug: String!
}

input CreateTagInput {
  name: String!
  slug: String!
}

input CreateMediaInput {
  url: String!
  type: String!
  postId: ID
  userId: ID
}

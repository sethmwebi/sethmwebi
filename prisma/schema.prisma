datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  posts    Post[]
  comments Comment[]
  likes    Like[]
  media    Media[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification-tokens")
}

model Post {
  id         String         @id @default(cuid())
  title      String
  content    String
  imageUrl   String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  authorId   String
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likes      Like[]
  categories PostCategory[]
  tags       PostTag[]
  media      Media[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Category {
  id    String         @id @default(cuid())
  name  String
  slug  String         @unique
  posts PostCategory[]

  @@map("categories")
}

model Tag {
  id    String    @id @default(cuid())
  name  String
  slug  String    @unique
  posts PostTag[]

  @@map("tags")
}

model PostCategory {
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post-categories")
}

model PostTag {
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post-tags")
}

model Media {
  id     String  @id @default(cuid())
  url    String
  type   String
  postId String?
  userId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media")
}
